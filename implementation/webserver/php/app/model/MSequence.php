<?php

/**
 * @brief Model for sequence object.
 */
class MSequence extends MObjectModel {
    /**
     * @const urlPrefix
     * Used for generating url for this model.
     */
    const urlPrefix = 'sequence';
    /**
     * @var $name
     * Name of sequence loaded from database.
     */
    public $name;
    /**
     * @var $userId
     * Id of user that created this sequence, loaded from database.
     */
    public $userId;
    /**
     * @var MRTStepsInSequence $steps
     * List of models of every step that is a part of this sequence.
     */
    public $steps;
    /**
     * @var $tmpId
     * Id that is used during storing phase, if storing is successful, $id is set to $tmpId.
     */
    private $tmpId;

    /**
     * Constructs model using data from database.
     * @param $id Id of sequence in database.
     */
    public function __construct($id = 0) {
        parent::__construct();
        if($id) {
            $sqls=DB::query("SELECT * FROM sequences WHERE id=$id");
            $o=$sqls->fetchObject();
            if ($o) {
                $this->id = $o->id;
                $this->name = $o->name;
                $this->userId = $o->users_id;
            }
        }
        $this->steps = new MRTStepsInSequence($id);
    }

    /**
     * @brief Tries to store data to database.
     * @param null $arg Universal argument, not used here.
     * @return bool Storing was successful.
     */
    public function store(int $arg = 0) : bool {
        if (!parent::store()) return false; // TODO: Change the autogenerated stub
        $sql = $this->id ? "UPDATE" : "INSERT INTO";
        $sql.=" sequences SET name=:name, user_id=:user_id";
        if ($this->id) $sql.=" WHERE id=$this->id";
        $sqls=DB::prepare($sql);
        $res = true;
        try {
            $res = $sqls->execute(["name" => $this->name, "user_id" => $_SESSION["loginId"]]);
        } catch (PDOException) {
            $res = false;
        }
        if (!$res) {
            error_log(get_called_class().": SQL Error.");
            return false;
        }
        if (!$this->id) $this->tmpId = DB::lastInsertId();
        else $this->tmpId = $this->id;
        if(!$this->steps->store($this->tmpId)) return false;
        return true;
    }

    /**
     * @brief Used when storing in database was successful. Commits all changes to model and database.
     * @return void
     */
    public function storeCommit() : void {
        parent::storeCommit();
        if (!$this->id) $this->id = $this->tmpId;
        $this->steps->storeCommit();
    }

    /**
     * @brief Deletes corresponding record from database.
     * @return bool Deletion was successful.
     */
    public function delete($arg = NULL) : bool {
        if (!$this->id) return TRUE;

        $sql = "DELETE FROM steps WHERE seq_id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;

        $sql = "DELETE FROM instances WHERE seq_id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;

        $sql = "DELETE FROM sequences WHERE id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        if (FALSE===parent::delete()) return FALSE;
        $this->tmpId = NULL;
        return TRUE;
    }

    /**
     * Starts saving process to database.
     * Called when button in edit form using this model is pressed. Adds notification to user about result.
     * @return void
     */
    public function clickedSubmit() {
        if ($this->persist()) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Sequence was saved."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Sequence could not have been saved!"));
    }

    /**
     * Starts deleting process in database.
     * If not successful, reverts changes made. Adds notification to user about result.
     * @return bool
     */
    public function unpersist() : bool {
        $ret = parent::unpersist();
        if ($ret) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Sequence was deleted."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Sequence could not have been saved!"));
        return $ret;
    }
}
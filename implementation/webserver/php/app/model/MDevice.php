<?php

/**
 * @brief Model for device object.
 */
class MDevice extends MObjectModel {
    /**
     * @const urlPrefix
     * Used for generating url for this model.
     */
    const urlPrefix = 'device';
    /**
     * @var $name
     * Name of device loaded from database.
     */
    public $name;
    /**
     * @var $location
     * Physical location of device loaded from database.
     */
    public $location;
    /**
     * @var $gatewayId
     * Id of gateway used for communication with device, loaded from database.
     */
    public $gatewayId;
    /**
     * @var $created
     * Timestamp of moment of creation of device in the database.
     */
    public $created;
    /**
     * @var $lastChanged
     * Timestamp of last update to the device.
     */
    public $lastChanged;
    public $domainId;

    /**
     * @var MRTCollInDevice $collections
     * List of models of every collection this device is a part of.
     */
    public $collections;
    /**
     * @var $tmpId
     * Id that is used during storing phase, if storing is successful, $id is set to $tmpId.
     */
    private $tmpId;

    /**
     * Constructs model using data from database.
     * @param $id Id of device in database.
     */
    public function __construct($id = 0) {
        parent::__construct();
        if($id) {
            $sqls=DB::query("SELECT *,UNIX_TIMESTAMP(created) AS created_epoch, UNIX_TIMESTAMP(last_changed) AS last_changed_epoch FROM devices WHERE id=$id");
            $o=$sqls->fetchObject();
            if ($o) {
                $this->id = $o->id;
                $this->name = $o->name;
                $this->location = $o->location;
                $this->gatewayId = $o->gateway_id;
                $this->created = timetostr($o->created_epoch);
                $this->lastChanged = timetostr($o->last_changed_epoch);
                $this->domainId = $o->domain_id;
            }
        }
        $this->collections = new MRTCollInDevice($id);
    }

    /**
     * @brief Tries to store data to database.
     * @param null $arg Universal argument, not used here.
     * @return bool Storing was successful.
     */
    public function store(int $arg = 0) : bool {
        if (!parent::store()) return false; // TODO: Change the autogenerated stub
        $sql = $this->id ? "UPDATE" : "INSERT INTO";
        $sql.=" devices SET name=:name, location=:location, gateway_id=:gateway_id,"
        ." last_changed=NOW(), domain_id=1";
        if ($this->id) $sql.=" WHERE id=$this->id";
        $sqls=DB::prepare($sql);
        $res = true;
        try {
            $res = $sqls->execute(["name" => $this->name, "location" => $this->location,
                "gateway_id" => $this->gatewayId]);
        } catch (PDOException) {
            $res = false;
        }
        if (!$res) {
            error_log(get_called_class().": SQL Error.");
            return false;
        }
        if (!$this->id) $this->tmpId = DB::lastInsertId();
        else $this->tmpId = $this->id;
        if(!$this->collections->store($this->tmpId)) return false;
        return true;
    }

    /**
     * @brief Used when storing in database was successful. Commits all changes to model and database.
     * @return void
     */
    public function storeCommit() : void {
        parent::storeCommit();
        if (!$this->id) $this->id = $this->tmpId;
    }

    /**
     * @brief Deletes corresponding record from database.
     * @return bool Deletion was successful.
     */
    public function delete($arg = NULL) : bool {
        if (!$this->id) return TRUE;
        $sql = "SELECT COUNT(*) AS c FROM steps WHERE channel_id IN (SELECT id FROM channels where device_id=$this->id)";
        $sqls=DB::query($sql);
        $o=$sqls->fetchObject();
        if ($o->c) return FALSE;
        $sql = "DELETE FROM channels WHERE device_id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        $sql = "DELETE FROM collection_devices WHERE device_id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        $sql = "DELETE FROM devices WHERE id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        if (FALSE===parent::delete()) return FALSE;
        $this->tmpId = NULL;
        return TRUE;
    }

    /**
     * Starts saving process to database.
     * Called when button in edit form using this model is pressed. Adds notification to user about result.
     * @return void
     */
    public function clickedSubmit() {
        if ($this->persist()) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Device was saved."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Device could not have been saved!"));
    }

    /**
     * Starts deleting process in database.
     * If not successful, reverts changes made. Adds notification to user about result.
     * @return bool
     */
    public function unpersist() : bool {
        $ret = parent::unpersist();
        if ($ret) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Device was deleted."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Device could not have been deleted!"));
        return $ret;
    }
}
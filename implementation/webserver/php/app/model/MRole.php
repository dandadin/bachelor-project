<?php

/**
 * @brief Model for role object.
 */
class MRole extends MModel {
    /**
     * @var $id
     * Id of role loaded from database.
     */
    public $id;
    /**
     * @var $name
     * Name of role loaded from database.
     */
    public $name;
    /**
     * @var $canEditGroups
     * Boolean flag determining if this role can edit groups. Loaded from database.
     */
    public $canEditGroups;
    /**
     * @var $canEditUsers
     * Boolean flag determining if this role can edit users. Loaded from database.
     */
    public $canEditUsers;
    /**
     * @var $tmpId
     * Id that is used during storing phase, if storing is successful, $id is set to $tmpId.
     */
    private $tmpId;

    /**
     * Constructs model using data from database.
     * @param $id Id of role in database.
     */
    public function __construct($id) {
        if($id) {
            $sqls=DB::query("SELECT * FROM roles WHERE id=$id");
            $o=$sqls->fetchObject();
            if ($o) {
                $this->id = $o->id;
                $this->name = $o->name;
                $this->canEditGroups = $o->can_edit_groups;
                $this->canEditUsers = $o->can_edit_users;
            }
        }
    }

    /**
     * @brief Tries to store data to database.
     * @param null $arg Universal argument, not used here.
     * @return bool Storing was successful.
     */
    public function store(int $arg = 0) {
        if (!parent::store()) return false; // TODO: Change the autogenerated stub
        $sql = $this->id ? "UPDATE" : "INSERT INTO";
        $sql.=" roles SET name=:name, can_edit_groups=:can_edit_groups, can_edit_users=:can_edit_users";
        if ($this->id) $sql.=" WHERE id=$this->id";
        $sqls=DB::prepare($sql);
        $res = true;
        try {
            $res = $sqls->execute(["name" => $this->name, "can_edit_groups" => $this->canEditGroups,
                "can_edit_users" => $this->canEditUsers]);
        } catch (PDOException) {
            $res = false;
        }
        if (!$res) {
            error_log(get_called_class().": SQL Error.");
            return false;
        }
        if (!$this->id) $this->tmpId = DB::lastInsertId();
        return true;
    }

    /**
     * @brief Used when storing in database was successful. Commits all changes to model and database.
     * @return void
     */
    public function storeCommit() {
        parent::storeCommit();
        if (!$this->id) $this->id = $this->tmpId;
    }

    /**
     * @brief Deletes corresponding record from database.
     * @return bool Deletion was successful.
     */
    public function delete($arg = NULL) {
        if (!$this->id) return TRUE;
        $sql = "DELETE FROM roles WHERE id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        if (FALSE===parent::delete()) return FALSE;
        $this->tmpId = NULL;
        return TRUE;
    }

    /**
     * Starts saving process to database.
     * Called when button in edit form using this model is pressed.
     * @return void
     */
    public function clickedSubmit() {
        if ($this->persist()) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Role was saved."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Role could not have been saved!"));
    }


}
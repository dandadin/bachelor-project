<?php

/**
 * @brief Model for step object.
 */
class MStep extends MObjectModel {
    /**
     * @const urlPrefix
     * Used for generating url for this model.
     */
    const urlPrefix = 'step';
    /**
     * @var $index
     * Index of this step in its sequence, loaded from database.
     */
    public $index;
    /**
     * @var $seqId
     * Id of sequence this step is a part of, loaded from database.
     */
    public $seqId;
    /**
     * @var $channelId
     * Id of channel this step should be sent to, loaded from database.
     */
    public $channelId;
    /**
     * @var $value
     * Value of step, loaded from database.
     */
    public $value;
    /**
     * @var $delayBefore
     * Delay (in seconds) before this step should be spplied, loaded from database.
     */
    public $delayBefore;
    /**
     * @var $tmpId
     * Id that is used during storing phase, if storing is successful, $id is set to $tmpId.
     */
    private $tmpId;

    /**
     * Constructs model using data from database.
     * @param $id Id of step in database.
     */
    public function __construct($id = 0) {
        parent::__construct();
        if($id) {
            $sqls=DB::query("SELECT * FROM steps WHERE id=$id");
            $o=$sqls->fetchObject();
            if ($o) {
                $this->id = $o->id;
                $this->index = $o->idx;
                $this->seqId = $o->seq_id;
                $this->channelId = $o->channel_id;
                $this->value = $o->value;
                $this->delayBefore = $o->delay_before;
            }
        }
    }

    /**
     * @brief Tries to store data to database.
     * @param null $arg Universal argument, not used here.
     * @return bool Storing was successful.
     */
    public function store(int $arg = 0) : bool {
        if (!parent::store()) return false; // TODO: Change the autogenerated stub
        $sql = $this->id ? "UPDATE" : "INSERT INTO";
        $sql.=  " steps SET idx=:idx, seq_id=:seq_id, channel_id=:channel_id,".
                " value=:value, delay_before=:delay_before";
        if ($this->id) $sql.=" WHERE id=$this->id";
        $sqls=DB::prepare($sql);
        $res = true;
        try {
            $res = $sqls->execute(["idx" => $this->index, "seq_id" => $this->seqId, "channel_id" => $this->channelId,
                "value" => $this->value, "delay_before" => $this->delayBefore]);
        } catch (PDOException) {
            $res = false;
        }
        if (!$res) {
            error_log(get_called_class().": SQL Error.");
            return false;
        }
        if (!$this->id) $this->tmpId = DB::lastInsertId();
        else $this->tmpId = $this->id;
        return true;
    }

    /**
     * @brief Used when storing in database was successful. Commits all changes to model and database.
     * @return void
     */
    public function storeCommit() : void {
        parent::storeCommit();
        if (!$this->id) $this->id = $this->tmpId;
    }

    /**
     * @brief Deletes corresponding record from database.
     * @return bool Deletion was successful.
     */
    public function delete($arg = NULL) : bool {
        if (!$this->id) return TRUE;;
        $sql = "DELETE FROM steps WHERE id=$this->id";
        if (FALSE===DB::exec($sql)) return FALSE;
        if (FALSE===parent::delete()) return FALSE;
        $this->tmpId = NULL;
        return TRUE;
    }

    /**
     * Starts saving process to database.
     * Called when button in edit form using this model is pressed. Adds notification to user about result.
     * @return void
     */
    public function clickedSubmit() {
        if ($this->persist()) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Step was saved."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Step could not have been saved!"));
    }

    /**
     * Starts deleting process in database.
     * If not successful, reverts changes made. Adds notification to user about result.
     * @return bool
     */
    public function unpersist() : bool {
        $ret = parent::unpersist();
        if ($ret) VPageHollow::addNotification(new VNotification(VNotification::NT_Success, "Step was deleted."));
        else VPageHollow::addNotification(new VNotification(VNotification::NT_Error, "Step could not have been deleted!"));
        return $ret;
    }
}